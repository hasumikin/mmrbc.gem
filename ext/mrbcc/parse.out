State 0:
          program ::= * top_compstmt
          top_compstmt ::= * top_stmts opt_terms
          top_stmts ::= * top_stmt
          top_stmt ::= * stmt
          stmt ::= * expr
          expr ::= * arg
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 8      numeric ::= INTEGER
                       program accept
                  top_compstmt shift        10     
                     top_stmts shift        5      
                      top_stmt shift-reduce 2      top_stmts ::= top_stmt
                          stmt shift-reduce 2      top_stmts ::= top_stmt  /* because stmt==top_stmt */
                          expr shift-reduce 2      top_stmts ::= top_stmt  /* because expr==stmt */
                           arg shift        7      
                       primary shift-reduce 7      arg ::= primary
                       literal shift-reduce 7      arg ::= primary  /* because literal==primary */
                       numeric shift-reduce 7      arg ::= primary  /* because numeric==literal */

State 1:
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= arg DIVIDE * arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 8      numeric ::= INTEGER
                           arg shift-reduce 6      arg ::= arg DIVIDE arg
                       primary shift-reduce 7      arg ::= primary
                       literal shift-reduce 7      arg ::= primary  /* because literal==primary */
                       numeric shift-reduce 7      arg ::= primary  /* because numeric==literal */

State 2:
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= arg TIMES * arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 8      numeric ::= INTEGER
                           arg shift-reduce 5      arg ::= arg TIMES arg
                       primary shift-reduce 7      arg ::= primary
                       literal shift-reduce 7      arg ::= primary  /* because literal==primary */
                       numeric shift-reduce 7      arg ::= primary  /* because numeric==literal */

State 3:
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= arg MINUS * arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 8      numeric ::= INTEGER
                           arg shift        8      
                       primary shift-reduce 7      arg ::= primary
                       literal shift-reduce 7      arg ::= primary  /* because literal==primary */
                       numeric shift-reduce 7      arg ::= primary  /* because numeric==literal */

State 4:
          arg ::= * arg PLUS arg
          arg ::= arg PLUS * arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 8      numeric ::= INTEGER
                           arg shift        9      
                       primary shift-reduce 7      arg ::= primary
                       literal shift-reduce 7      arg ::= primary  /* because literal==primary */
                       numeric shift-reduce 7      arg ::= primary  /* because numeric==literal */

State 5:
          top_compstmt ::= top_stmts * opt_terms
     (14) opt_terms ::= *
          opt_terms ::= * terms
          terms ::= * term
          terms ::= * terms term
          term ::= * NL
          term ::= * SEMICOLON

                            NL shift-reduce 18     term ::= NL
                     SEMICOLON shift-reduce 19     term ::= SEMICOLON
                     opt_terms shift-reduce 1      top_compstmt ::= top_stmts opt_terms
                         terms shift        6      
                          term shift        6        /* because term==terms */
                     {default} reduce       14     opt_terms ::=

State 6:
     (15) opt_terms ::= terms *
          terms ::= terms * term
          term ::= * NL
          term ::= * SEMICOLON

                            NL shift-reduce 18     term ::= NL
                     SEMICOLON shift-reduce 19     term ::= SEMICOLON
                          term shift-reduce 17     terms ::= terms term
                     {default} reduce       15     opt_terms ::= terms

State 7:
     (11) expr ::= arg *
          arg ::= arg * PLUS arg
          arg ::= arg * MINUS arg
          arg ::= arg * TIMES arg
          arg ::= arg * DIVIDE arg

                          PLUS shift        4      
                         MINUS shift        3      
                        DIVIDE shift        1      
                         TIMES shift        2      
                     {default} reduce       11     expr ::= arg

State 8:
          arg ::= arg * PLUS arg
          arg ::= arg * MINUS arg
      (4) arg ::= arg MINUS arg *
          arg ::= arg * TIMES arg
          arg ::= arg * DIVIDE arg

                          PLUS shift        4       -- dropped by precedence
                         MINUS shift        3       -- dropped by precedence
                        DIVIDE shift        1      
                        DIVIDE reduce 4       -- dropped by precedence
                         TIMES shift        2      
                         TIMES reduce 4       -- dropped by precedence
                     {default} reduce       4      arg ::= arg MINUS arg

State 9:
          arg ::= arg * PLUS arg
      (3) arg ::= arg PLUS arg *
          arg ::= arg * MINUS arg
          arg ::= arg * TIMES arg
          arg ::= arg * DIVIDE arg

                          PLUS shift        4       -- dropped by precedence
                         MINUS shift        3       -- dropped by precedence
                        DIVIDE shift        1      
                        DIVIDE reduce 3       -- dropped by precedence
                         TIMES shift        2      
                         TIMES reduce 3       -- dropped by precedence
                     {default} reduce       3      arg ::= arg PLUS arg

State 10:
      (0) program ::= top_compstmt *

                             $ reduce       0      program ::= top_compstmt

----------------------------------------------------
Symbols:
The first-set of non-terminals is shown after the name.

    0: $:
    1: PLUS (precedence=1)
    2: MINUS (precedence=1)
    3: DIVIDE (precedence=2)
    4: TIMES (precedence=2)
    5: INTEGER
    6: NL
    7: SEMICOLON
    8: program: INTEGER
    9: top_compstmt: INTEGER
   10: top_stmts: INTEGER
   11: opt_terms: <lambda> NL SEMICOLON
   12: top_stmt: INTEGER
   13: stmt: INTEGER
   14: expr: INTEGER
   15: arg: INTEGER
   16: primary: INTEGER
   17: literal: INTEGER
   18: numeric: INTEGER
   19: terms: NL SEMICOLON
   20: term: NL SEMICOLON
----------------------------------------------------
Syntax-only Symbols:
The following symbols never carry semantic content.

$ PLUS MINUS DIVIDE TIMES NL SEMICOLON program opt_terms stmt expr literal
numeric terms term
----------------------------------------------------
Rules:
   0: program ::= top_compstmt.
   1: top_compstmt ::= top_stmts opt_terms.
   2: top_stmts ::= top_stmt.
   3: arg ::= arg PLUS arg. [PLUS precedence=1]
   4: arg ::= arg MINUS arg. [MINUS precedence=1]
   5: arg ::= arg TIMES arg. [TIMES precedence=2]
   6: arg ::= arg DIVIDE arg. [DIVIDE precedence=2]
   7: arg ::= primary.
   8: numeric ::= INTEGER.
   9: top_stmt ::= stmt.
  10: stmt ::= expr.
  11: expr ::= arg.
  12: primary ::= literal.
  13: literal ::= numeric.
  14: opt_terms ::=.
  15: opt_terms ::= terms.
  16: terms ::= term.
  17: terms ::= terms term.
  18: term ::= NL.
  19: term ::= SEMICOLON.
