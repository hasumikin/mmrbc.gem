State 0:
          program ::= * top_compstmt
          top_compstmt ::= * top_stmts opt_terms
          top_stmts ::= * none
          top_stmts ::= * top_stmt
          top_stmts ::= * top_stmts terms top_stmt
          top_stmt ::= * stmt
          stmt ::= * expr
          expr ::= * command_call
          expr ::= * arg
          command_call ::= * command
          command ::= * operation command_args
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER
          operation ::= * IDENTIFIER
          operation ::= * CONSTANT
          operation ::= * FID
     (17) none ::= *

                       INTEGER shift-reduce 15     numeric ::= INTEGER
                    IDENTIFIER shift-reduce 16     operation ::= IDENTIFIER
                      CONSTANT shift-reduce 27     operation ::= CONSTANT
                           FID shift-reduce 28     operation ::= FID
                       program accept
                  top_compstmt shift        16     
                     top_stmts shift        8      
                          none shift-reduce 2      top_stmts ::= none
                      top_stmt shift-reduce 3      top_stmts ::= top_stmt
                          stmt shift-reduce 3      top_stmts ::= top_stmt  /* because stmt==top_stmt */
                          expr shift-reduce 3      top_stmts ::= top_stmt  /* because expr==stmt */
                  command_call shift-reduce 3      top_stmts ::= top_stmt  /* because command_call==expr */
                           arg shift        13     
                       command shift-reduce 3      top_stmts ::= top_stmt  /* because command==command_call */
                     operation shift        2      
                       primary shift        13       /* because primary==arg */
                       literal shift        13       /* because literal==primary */
                       numeric shift        13       /* because numeric==literal */
                     {default} reduce       17     none ::=

State 1:
          top_stmts ::= top_stmts terms * top_stmt
          top_stmt ::= * stmt
          stmt ::= * expr
          expr ::= * command_call
          expr ::= * arg
          command_call ::= * command
          command ::= * operation command_args
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER
          operation ::= * IDENTIFIER
          operation ::= * CONSTANT
          operation ::= * FID
     (30) opt_terms ::= terms *
          terms ::= terms * term
          term ::= * NL
          term ::= * SEMICOLON

                       INTEGER shift-reduce 15     numeric ::= INTEGER
                    IDENTIFIER shift-reduce 16     operation ::= IDENTIFIER
                      CONSTANT shift-reduce 27     operation ::= CONSTANT
                           FID shift-reduce 28     operation ::= FID
                            NL shift-reduce 33     term ::= NL
                     SEMICOLON shift-reduce 34     term ::= SEMICOLON
                      top_stmt shift-reduce 4      top_stmts ::= top_stmts terms top_stmt
                          stmt shift-reduce 4      top_stmts ::= top_stmts terms top_stmt  /* because stmt==top_stmt */
                          expr shift-reduce 4      top_stmts ::= top_stmts terms top_stmt  /* because expr==stmt */
                  command_call shift-reduce 4      top_stmts ::= top_stmts terms top_stmt  /* because command_call==expr */
                           arg shift        13     
                       command shift-reduce 4      top_stmts ::= top_stmts terms top_stmt  /* because command==command_call */
                     operation shift        2      
                       primary shift        13       /* because primary==arg */
                       literal shift        13       /* because literal==primary */
                       numeric shift        13       /* because numeric==literal */
                          term shift-reduce 32     terms ::= terms term
                     {default} reduce       30     opt_terms ::= terms

State 2:
          command ::= operation * command_args
          command_args ::= * call_args
          call_args ::= * args opt_block_arg
          args ::= * arg
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 15     numeric ::= INTEGER
                           arg shift        11     
                  command_args shift-reduce 5      command ::= operation command_args
                     call_args shift-reduce 5      command ::= operation command_args  /* because call_args==command_args */
                          args shift        9      
                       primary shift        11       /* because primary==arg */
                       literal shift        11       /* because literal==primary */
                       numeric shift        11       /* because numeric==literal */

State 3:
          block_arg ::= AMPER * arg
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 15     numeric ::= INTEGER
                           arg shift        12     
                       primary shift        12       /* because primary==arg */
                       literal shift        12       /* because literal==primary */
                       numeric shift        12       /* because numeric==literal */

State 4:
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= arg DIVIDE * arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 15     numeric ::= INTEGER
                           arg shift-reduce 14     arg ::= arg DIVIDE arg
                       primary shift-reduce 14     arg ::= arg DIVIDE arg  /* because primary==arg */
                       literal shift-reduce 14     arg ::= arg DIVIDE arg  /* because literal==primary */
                       numeric shift-reduce 14     arg ::= arg DIVIDE arg  /* because numeric==literal */

State 5:
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= arg TIMES * arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 15     numeric ::= INTEGER
                           arg shift-reduce 13     arg ::= arg TIMES arg
                       primary shift-reduce 13     arg ::= arg TIMES arg  /* because primary==arg */
                       literal shift-reduce 13     arg ::= arg TIMES arg  /* because literal==primary */
                       numeric shift-reduce 13     arg ::= arg TIMES arg  /* because numeric==literal */

State 6:
          arg ::= * arg PLUS arg
          arg ::= * arg MINUS arg
          arg ::= arg MINUS * arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 15     numeric ::= INTEGER
                           arg shift        14     
                       primary shift        14       /* because primary==arg */
                       literal shift        14       /* because literal==primary */
                       numeric shift        14       /* because numeric==literal */

State 7:
          arg ::= * arg PLUS arg
          arg ::= arg PLUS * arg
          arg ::= * arg MINUS arg
          arg ::= * arg TIMES arg
          arg ::= * arg DIVIDE arg
          arg ::= * primary
          primary ::= * literal
          literal ::= * numeric
          numeric ::= * INTEGER

                       INTEGER shift-reduce 15     numeric ::= INTEGER
                           arg shift        15     
                       primary shift        15       /* because primary==arg */
                       literal shift        15       /* because literal==primary */
                       numeric shift        15       /* because numeric==literal */

State 8:
          top_compstmt ::= top_stmts * opt_terms
          top_stmts ::= top_stmts * terms top_stmt
     (29) opt_terms ::= *
          opt_terms ::= * terms
          terms ::= * term
          terms ::= * terms term
          term ::= * NL
          term ::= * SEMICOLON

                            NL shift-reduce 33     term ::= NL
                     SEMICOLON shift-reduce 34     term ::= SEMICOLON
                     opt_terms shift-reduce 1      top_compstmt ::= top_stmts opt_terms
                         terms shift        1      
                          term shift        1        /* because term==terms */
                     {default} reduce       29     opt_terms ::=

State 9:
          call_args ::= args * opt_block_arg
          opt_block_arg ::= * COMMA block_arg
          opt_block_arg ::= * none
     (17) none ::= *

                         COMMA shift        10     
                          none shift-reduce 9      opt_block_arg ::= none
                 opt_block_arg shift-reduce 6      call_args ::= args opt_block_arg
                     {default} reduce       17     none ::=

State 10:
          block_arg ::= * AMPER arg
          opt_block_arg ::= COMMA * block_arg

                         AMPER shift        3      
                     block_arg shift-reduce 8      opt_block_arg ::= COMMA block_arg

State 11:
     (10) args ::= arg *
          arg ::= arg * PLUS arg
          arg ::= arg * MINUS arg
          arg ::= arg * TIMES arg
          arg ::= arg * DIVIDE arg

                          PLUS shift        7      
                         MINUS shift        6      
                        DIVIDE shift        4      
                         TIMES shift        5      
                     {default} reduce       10     args ::= arg

State 12:
      (7) block_arg ::= AMPER arg *
          arg ::= arg * PLUS arg
          arg ::= arg * MINUS arg
          arg ::= arg * TIMES arg
          arg ::= arg * DIVIDE arg

                          PLUS shift        7      
                         MINUS shift        6      
                        DIVIDE shift        4      
                         TIMES shift        5      
                     {default} reduce       7      block_arg ::= AMPER arg

State 13:
     (21) expr ::= arg *
          arg ::= arg * PLUS arg
          arg ::= arg * MINUS arg
          arg ::= arg * TIMES arg
          arg ::= arg * DIVIDE arg

                          PLUS shift        7      
                         MINUS shift        6      
                        DIVIDE shift        4      
                         TIMES shift        5      
                     {default} reduce       21     expr ::= arg

State 14:
          arg ::= arg * PLUS arg
          arg ::= arg * MINUS arg
     (12) arg ::= arg MINUS arg *
          arg ::= arg * TIMES arg
          arg ::= arg * DIVIDE arg

                          PLUS shift        7       -- dropped by precedence
                         MINUS shift        6       -- dropped by precedence
                        DIVIDE shift        4      
                        DIVIDE reduce 12      -- dropped by precedence
                         TIMES shift        5      
                         TIMES reduce 12      -- dropped by precedence
                     {default} reduce       12     arg ::= arg MINUS arg

State 15:
          arg ::= arg * PLUS arg
     (11) arg ::= arg PLUS arg *
          arg ::= arg * MINUS arg
          arg ::= arg * TIMES arg
          arg ::= arg * DIVIDE arg

                          PLUS shift        7       -- dropped by precedence
                         MINUS shift        6       -- dropped by precedence
                        DIVIDE shift        4      
                        DIVIDE reduce 11      -- dropped by precedence
                         TIMES shift        5      
                         TIMES reduce 11      -- dropped by precedence
                     {default} reduce       11     arg ::= arg PLUS arg

State 16:
      (0) program ::= top_compstmt *

                             $ reduce       0      program ::= top_compstmt

----------------------------------------------------
Symbols:
The first-set of non-terminals is shown after the name.

    0: $:
    1: PLUS (precedence=1)
    2: MINUS (precedence=1)
    3: DIVIDE (precedence=2)
    4: TIMES (precedence=2)
    5: AMPER
    6: COMMA
    7: INTEGER
    8: IDENTIFIER
    9: CONSTANT
   10: FID
   11: NL
   12: SEMICOLON
   13: program: <lambda> INTEGER IDENTIFIER CONSTANT FID NL SEMICOLON
   14: top_compstmt: <lambda> INTEGER IDENTIFIER CONSTANT FID NL SEMICOLON
   15: top_stmts: <lambda> INTEGER IDENTIFIER CONSTANT FID NL SEMICOLON
   16: opt_terms: <lambda> NL SEMICOLON
   17: none: <lambda>
   18: top_stmt: INTEGER IDENTIFIER CONSTANT FID
   19: terms: NL SEMICOLON
   20: stmt: INTEGER IDENTIFIER CONSTANT FID
   21: expr: INTEGER IDENTIFIER CONSTANT FID
   22: command_call: IDENTIFIER CONSTANT FID
   23: arg: INTEGER
   24: command: IDENTIFIER CONSTANT FID
   25: operation: IDENTIFIER CONSTANT FID
   26: command_args: INTEGER
   27: call_args: INTEGER
   28: args: INTEGER
   29: opt_block_arg: <lambda> COMMA
   30: block_arg: AMPER
   31: primary: INTEGER
   32: literal: INTEGER
   33: numeric: INTEGER
   34: term: NL SEMICOLON
----------------------------------------------------
Syntax-only Symbols:
The following symbols never carry semantic content.

$ PLUS MINUS DIVIDE TIMES AMPER COMMA CONSTANT FID NL SEMICOLON program
opt_terms none terms stmt expr command_call command call_args primary
literal numeric term
----------------------------------------------------
Rules:
   0: program ::= top_compstmt.
   1: top_compstmt ::= top_stmts opt_terms.
   2: top_stmts ::= none.
   3: top_stmts ::= top_stmt.
   4: top_stmts ::= top_stmts terms top_stmt.
   5: command ::= operation command_args.
   6: call_args ::= args opt_block_arg.
   7: block_arg ::= AMPER arg.
   8: opt_block_arg ::= COMMA block_arg.
   9: opt_block_arg ::= none.
  10: args ::= arg.
  11: arg ::= arg PLUS arg. [PLUS precedence=1]
  12: arg ::= arg MINUS arg. [MINUS precedence=1]
  13: arg ::= arg TIMES arg. [TIMES precedence=2]
  14: arg ::= arg DIVIDE arg. [DIVIDE precedence=2]
  15: numeric ::= INTEGER.
  16: operation ::= IDENTIFIER.
  17: none ::=.
  18: top_stmt ::= stmt.
  19: stmt ::= expr.
  20: expr ::= command_call.
  21: expr ::= arg.
  22: command_call ::= command.
  23: command_args ::= call_args.
  24: arg ::= primary.
  25: primary ::= literal.
  26: literal ::= numeric.
  27: operation ::= CONSTANT.
  28: operation ::= FID.
  29: opt_terms ::=.
  30: opt_terms ::= terms.
  31: terms ::= term.
  32: terms ::= terms term.
  33: term ::= NL.
  34: term ::= SEMICOLON.
